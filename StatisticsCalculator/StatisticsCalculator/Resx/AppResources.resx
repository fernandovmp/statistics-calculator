<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddButtonText" xml:space="preserve">
    <value>Add</value>
    <comment>Add new item</comment>
  </data>
  <data name="AmountOfSuccess" xml:space="preserve">
    <value>Amount of success</value>
    <comment>Binomial amount of success label</comment>
  </data>
  <data name="BaseCalculatorLabel" xml:space="preserve">
    <value>Base calculator</value>
    <comment>Base calculator name</comment>
  </data>
  <data name="BetweenLabel" xml:space="preserve">
    <value>Between</value>
    <comment>Value of x are between</comment>
  </data>
  <data name="BinomialRange_Exact" xml:space="preserve">
    <value>Exact</value>
    <comment>Binomial range value text for exact x</comment>
  </data>
  <data name="BinomialRange_Max" xml:space="preserve">
    <value>Maximun of</value>
    <comment>Binomial range value text for maximun of x</comment>
  </data>
  <data name="BinomialRange_Min" xml:space="preserve">
    <value>Minimun of</value>
    <comment>Binomial range value text for minimun of x</comment>
  </data>
  <data name="CalculateLabel" xml:space="preserve">
    <value>Calculate</value>
    <comment>Calculate the result</comment>
  </data>
  <data name="CleanButtonText" xml:space="preserve">
    <value>Clear</value>
    <comment>Clean sample</comment>
  </data>
  <data name="EmptySampleText" xml:space="preserve">
    <value>Sample is empty</value>
    <comment>Display when sample is empty</comment>
  </data>
  <data name="GreaterThanLabel" xml:space="preserve">
    <value>Greater than</value>
    <comment>Value of x are greater than</comment>
  </data>
  <data name="LessThanLabel" xml:space="preserve">
    <value>Less than</value>
    <comment>Value of x are less than</comment>
  </data>
  <data name="LinearRegressionLabel" xml:space="preserve">
    <value>Linear Regression</value>
    <comment>Linear regression label</comment>
  </data>
  <data name="MeanLabel" xml:space="preserve">
    <value>Mean</value>
    <comment>Mean label</comment>
  </data>
  <data name="MedianLabel" xml:space="preserve">
    <value>Median</value>
    <comment>Median label</comment>
  </data>
  <data name="ModeLabel" xml:space="preserve">
    <value>Mode</value>
    <comment>Mode label</comment>
  </data>
  <data name="NewSampleItemPlaceholder" xml:space="preserve">
    <value>New value...</value>
    <comment>Input placeholder por new sample item</comment>
  </data>
  <data name="NormalDistributionLabel" xml:space="preserve">
    <value>Normal distribution</value>
    <comment>Normal distribution label</comment>
  </data>
  <data name="PairModeText" xml:space="preserve">
    <value>Value pair</value>
    <comment>Text that indicates a value pair sample</comment>
  </data>
  <data name="PercentageLabel" xml:space="preserve">
    <value>Percentage</value>
    <comment>Percentage label</comment>
  </data>
  <data name="PopulationStandardDeviationLabel" xml:space="preserve">
    <value>Population standard deviation</value>
    <comment>Population standard deviation label</comment>
  </data>
  <data name="PopulationVarianceLabel" xml:space="preserve">
    <value>Population variance</value>
    <comment>Population variance label</comment>
  </data>
  <data name="RequirePairSample" xml:space="preserve">
    <value>The sample isn't in value pair mode, set the sample to value pair mode to use this calculator</value>
    <comment>Warning text showed when sample is in value pair mode and is required to be in value pair mode</comment>
  </data>
  <data name="RequireSimpleSample" xml:space="preserve">
    <value>The sample isn't in simple value mode, set the sample to simple value mode to use this calculator</value>
    <comment>Warning text showed when sample is in simple value mode and is required to be in simple mode</comment>
  </data>
  <data name="SampleLabel" xml:space="preserve">
    <value>Sample</value>
    <comment>Sample label</comment>
  </data>
  <data name="SampleSize" xml:space="preserve">
    <value>Sample size</value>
    <comment>Sample size label</comment>
  </data>
  <data name="SampleStandardDeviationLabel" xml:space="preserve">
    <value>Sample standard deviation</value>
    <comment>Sample standard deviation label</comment>
  </data>
  <data name="SampleVarianceLabel" xml:space="preserve">
    <value>Sample variance</value>
    <comment>Sample variance label</comment>
  </data>
  <data name="SimpleModeText" xml:space="preserve">
    <value>Simple values</value>
    <comment>Text that indicates a simple sample</comment>
  </data>
  <data name="StatisticsTabLabel" xml:space="preserve">
    <value>Statistics</value>
    <comment>Statistics tab text</comment>
  </data>
  <data name="SuccessRate" xml:space="preserve">
    <value>Success rate</value>
    <comment>Binomial success rate label</comment>
  </data>
  <data name="SumOfItemsLabel" xml:space="preserve">
    <value>Sum of items</value>
    <comment>Sum of items of the sample label</comment>
  </data>
  <data name="SumOfSquareLabel" xml:space="preserve">
    <value>Sum of square of items</value>
    <comment>Sum of square of items of the sample label</comment>
  </data>
  <data name="Y_NewSampleItemPlaceholder" xml:space="preserve">
    <value>New value of Y...</value>
    <comment>Input placeholder por new sample item of value pair mode</comment>
  </data>
</root>